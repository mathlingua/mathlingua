/*
 * Copyright 2023 Dominic Kramer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ast

union MlgNodeKind {
	Root
	IdItem
	Target
	Spec
	Alias
	Formulation[T]
	TextItem
	DeclareGroup
	AllOfGroup
	EquivalentlyGroup
	NotGroup
	AnyOfGroup
	OneOfGroup
	ExistsGroup
	ExistsUniqueGroup
	ForAllGroup
	IfGroup
	IffGroup
	PiecewiseGroup
	AssertingGroup
	SymbolWrittenGroup
	ComparisonGroup
	ViewGroup
	EncodingGroup
	WrittenGroup
	CalledGroup
	WritingGroup
	OverviewGroup
	RelatedGroup
	LabelGroup
	ByGroup
	DescribesGroup
	DefinesGroup
	CapturesGroup
	StatesGroup
	AxiomGroup
	ConjectureGroup
	TheoremGroup
	CorollaryGroup
	LemmaGroup
	ZeroGroup
	PositiveIntGroup
	NegativeIntGroup
	PositiveFloatGroup
	NegativeFloatGroup
	SpecifyGroup
	PersonGroup
	NameGroup
	BiographyGroup
	ResourceGroup
	TitleGroup
	AuthorGroup
	OffsetGroup
	UrlGroup
	HomepageGroup
	TypeGroup
	EditorGroup
	EditionGroup
	InstitutionGroup
	JournalGroup
	PublisherGroup
	VolumeGroup
	MonthGroup
	YearGroup
	DescriptionGroup
	Document
	TextBlockItem

	NameForm
	SymbolForm
	FunctionForm
	ExpressionForm
	TupleForm
	ConditionalSetForm
	ConditionalSetIdForm
	FunctionCallExpression
	TupleExpression
	LabeledGrouping
	ConditionalSetExpression
	CommandExpression
	PrefixOperatorCallExpression
	PostfixOperatorCallExpression
	InfixOperatorCallExpression
	IsExpression
	AsExpression
	OrdinalCallExpression
	ChainExpression
	Signature
	StructuralColonEqualsForm
	StructuralColonEqualsColonForm
	ExpressionColonEqualsItem
	ExpressionColonArrowItem
	ExpressionColonDashArrowItem
	EnclosedNonCommandOperatorTarget
	NonEnclosedNonCommandOperatorTarget
	InfixCommandExpression
	CommandId
	PrefixOperatorId
	PostfixOperatorId
	InfixOperatorId
	InfixCommandOperatorId
	PseudoTokenNode
	PseudoExpression
	MultiplexedInfixOperatorCallExpression
	InfixOperatorForm
	PrefixOperatorForm
	PostfixOperatorForm
	NamedArg
	NamedParam
	InfixCommandId
	FunctionLiteralExpression
	CurlyParam
	CurlyArg
	FunctionLiteralForm
	ProofThenGroup
	ProofThusGroup
	ProofThereforeGroup
	ProofHenceGroup
	ProofNoticeGroup
	ProofNextGroup
	ProofByBecauseThenGroup
	ProofBecauseThenGroup
	ProofStepwiseGroup
	ProofSupposeGroup
	ProofBlockGroup
	ProofWithoutLossOfGeneralityGroup
	ProofContradictionGroup
	ProofForContradictionGroup
	ProofForInductionGroup
	ProofClaimGroup
	ProofCasewiseGroup
	ProofEquivalentlyGroup
	ProofAllOfGroup
	ProofNotGroup
	ProofAnyOfGroup
	ProofOneOfGroup
	ProofExistsGroup
	ProofExistsUniqueGroup
	ProofForAllGroup
	ProofDeclareGroup
	ProofIfGroup
	ProofIffGroup
	DefinitionBuiltinExpression
	CommandTypeForm
	InfixCommandTypeForm
	NamedTypeParam
	CurlyTypeParam
	ProofForContrapositiveGroup
	ProofQedGroup
	ProofAbsurdGroup
	ProofDoneGroup
	ProofPartwiseGroup
	ProofSufficesToShowGroup
	ProofToShowGroup
	ProofRemarkGroup
	InductivelyGroup
	InductivelyCaseGroup
	MatchingGroup
	MatchingCaseGroup
	AbstractBuiltinExpression
	SpecificationBuiltinExpression
	StatementBuiltinExpression
	ExpressionBuiltinExpression
	TypeBuiltinExpression

	GetCommonMetaData() *CommonMetaData
	ForEach(fn func(subNode MlgNodeKind))
}
